UNIT LIB2;
INTERFACE
USES U_TOOL,CRT,LIBS;

PROCEDURE ISSUE_BOOK;
PROCEDURE RETURN_BOOK(ID:INTEGER);

PROCEDURE MEMBER_MODIFY(ID:INTEGER);
PROCEDURE MEMBER_ADD;
PROCEDURE MEMBER_DELETE(ID:INTEGER);

PROCEDURE BOOK_MODIFY(ID:INTEGER);
PROCEDURE BOOK_ADD;
PROCEDURE BOOK_DELETE(ID:INTEGER);

IMPLEMENTATION
USES DOS;
VAR
FOUND:BOOLEAN;
D:CHAR;
X,Y,XI:INTEGER;

PROCEDURE ISSUE_BOOK;
VAR
  ECODE:INTEGER;
  DD,MM,YY,DOM:WORD;
  P:DATE_TYPE;
  ST1,ST2:STRING;
  D:STRING;
  FOUND:BOOLEAN;
  R,REC:ISSUE_RECORD;
  B:BOOK_RECORD;
  M:MEMBER_RECORD;
BEGIN
     GETDATE(YY,MM,DD,DOM);
     P.DATE:=DD; P.MONTH:=MM; P.YEAR:=YY;
     RESET(ISSUE_FILE);
         INITIALIZE_ISSUE(REC);
         DISPLAY_ISSUE(REC);
       FOUND:=FALSE;
         REPEAT
         REPEAT
          STR(REC.M_ID,ST1);
          IF READXY(X,Y+1,XI,ST1) THEN EXIT;
          VAL(ST1,REC.M_ID,ECODE);
         UNTIL ECODE=0;
         INITIALIZE_MEMBER(M);
         M.ID:=REC.M_ID;
        RESET(MEMBER_FILE);
        IF SEARCH_MEMBER(MEMBER_FILE,M) THEN FOUND:=TRUE ELSE
        PRINT_ERROR(RECORD_NOT_FOUND);
         UNTIL FOUND;
         GOTOXY(X,Y);  WRITE(M.NAME);
         REC.M_NAME:=M.NAME;
      REPEAT
      REPEAT
         FOUND:=TRUE;
         REPEAT
          STR(REC.B_ID,ST2);
          IF READXY(X,Y+3,XI,ST2) THEN EXIT;
          VAL(ST2,REC.B_ID,ECODE);
         UNTIL ECODE=0;
         INITIALIZE_ISSUE(R);
         R.B_ID:=REC.B_ID;
         IF SEARCH_ISSUE(ISSUE_FILE,R) THEN
         PRINT_ERROR(RECORD_ALREADY_PRESENT) ELSE FOUND:=FALSE;
       UNTIL NOT FOUND;
             FOUND:=FALSE;
       RESET(BOOK_FILE);
       INITIALIZE_BOOK(B);
       B.ID:=REC.B_ID;
       RESET(BOOK_FILE);
       IF NOT SEARCH_BOOK(BOOK_FILE,B) THEN
      PRINT_ERROR(RECORD_NOT_FOUND)
      ELSE  FOUND:=TRUE;
      UNTIL FOUND;
      GOTOXY(X,Y+2); WRITE(B.NAME);
      REC.B_NAME:=B.NAME;
        REC.DOI:=P;
        REPEAT
           REPEAT
          D:=DT2ST(REC.DOI);
          IF READXY(X,Y+4,XI,D) THEN EXIT;
          UNTIL ST2DT(D,REC.DOI);
          IF NOT VALID_DATE(REC.DOI) THEN PRINT_ERROR(DATE_ERROR);
            UNTIL VALID_DATE(REC.DOI);

          RESET(ISSUE_FILE);
          SEEK(ISSUE_FILE,FILESIZE(ISSUE_FILE));
          WRITE(ISSUE_FILE,REC);
          CLOSE(ISSUE_FILE);
END;

PROCEDURE RETURN_BOOK(ID:INTEGER);
VAR R,REC:ISSUE_RECORD;
     T:ISSUE_FILETYPE;
BEGIN
      RESET(ISSUE_FILE);
     INITIALIZE_ISSUE(REC);
     REC.B_ID:=ID;
      IF SEARCH_ISSUE(ISSUE_FILE,REC) THEN
      BEGIN
      ASSIGN(T,'TEMP.DAT');
      REWRITE(T);
      RESET(ISSUE_FILE);
      WHILE NOT EOF(ISSUE_FILE) DO
      BEGIN
      READ(ISSUE_FILE,R);
      IF R.B_ID<>REC.B_ID THEN
      WRITE(T,R);
      END;
      CLOSE(T);
      CLOSE(ISSUE_FILE);
      COPYFILE('TEMP.DAT','ISSUE.DAT');
      UPDATE_EXPIRY;
     END
     ELSE
     PRINT_ERROR(RECORD_NOT_FOUND);
END;

PROCEDURE MEMBER_MODIFY(ID:INTEGER);
 VAR
     R,REC:MEMBER_RECORD;
     ST,D:STRING;
     ECODE:INTEGER;
     FOUND:BOOLEAN;
     FPOSI:INTEGER;
 BEGIN
      RESET(MEMBER_FILE);
      INITIALIZE_MEMBER(REC);
      REC.ID:=ID;
      IF SEARCH_MEMBER(MEMBER_FILE,REC) THEN
      BEGIN
          FPOSI:=FILEPOS(MEMBER_FILE)-1;
          DISPLAY_MEMBER(REC);
          IF READXY(X,Y,XI,REC.NAME) THEN EXIT;
          IF READXY(X,Y+2,XI,REC.ADD1) THEN EXIT;
          IF READXY(X,Y+3,XI,REC.ADD2) THEN EXIT;
        REPEAT
          REPEAT
          D:=DT2ST(REC.DOB);
          IF READXY(X,Y+4,XI,D) THEN EXIT;
          UNTIL ST2DT(D,REC.DOB);
          IF NOT VALID_DATE(REC.DOB) THEN PRINT_ERROR(DATE_ERROR);
          UNTIL VALID_DATE(REC.DOB);
          SEEK(MEMBER_FILE,FPOSI);
          WRITE(MEMBER_FILE,REC);
      END
      ELSE
      PRINT_ERROR(RECORD_NOT_FOUND);
END;

PROCEDURE MEMBER_ADD;
VAR
    T1,T2,T3:STRING;
    R,REC:MEMBER_RECORD;
    ST,D:STRING;
    ECODE:INTEGER;
    FOUND:BOOLEAN;
 BEGIN
    RESET(MEMBER_FILE);
         INITIALIZE_MEMBER(REC);
         DISPLAY_MEMBER(REC);
          IF READXY(X,Y,XI,REC.NAME) THEN EXIT;
          ST:='';
          FOUND:=TRUE;
          REPEAT
          REPEAT
          IF READXY(X,Y+1,XI,ST) THEN EXIT;
          VAL(ST,REC.ID,ECODE);
          UNTIL ECODE=0;
          INITIALIZE_MEMBER(R);
          R.ID:=REC.ID;
    IF SEARCH_MEMBER(MEMBER_FILE,R) THEN PRINT_ERROR(RECORD_ALREADY_PRESENT)
               ELSE FOUND:=FALSE;
          UNTIL NOT FOUND;
        IF READXY(X,Y+2,XI,REC.ADD1) THEN EXIT;
          IF READXY(X,Y+3,XI,REC.ADD2) THEN EXIT;
         REPEAT
          REPEAT
          D:=DT2ST(REC.DOB);
          IF READXY(X,Y+4,XI,D) THEN EXIT;
        {  IF NOT ST2DT(D,REC.DOB) THEN PRINT_ERROR(DATE_ERROR);}
          UNTIL ST2DT(D,REC.DOB);
          IF NOT VALID_DATE(REC.DOB) THEN PRINT_ERROR(DATE_ERROR);
          UNTIL VALID_DATE(REC.DOB);
          RESET(MEMBER_FILE);
          SEEK(MEMBER_FILE,FILESIZE(MEMBER_FILE));
          WRITE(MEMBER_FILE,REC);
          CLOSE(MEMBER_FILE);
END;

PROCEDURE MEMBER_DELETE(ID:INTEGER);
VAR
    R:MEMBER_FILETYPE;
    DOO:BOOLEAN;
    REC:MEMBER_RECORD;
BEGIN
    RESET(MEMBER_FILE);
    INITIALIZE_MEMBER(REC);
    REC.ID:=ID;
    IF NOT SEARCH_MEMBER(MEMBER_FILE,REC) THEN
    PRINT_ERROR(RECORD_NOT_FOUND)
    ELSE
  BEGIN
    ASSIGN(R,'TEMP.DAT');
    REWRITE(R);
    RESET(MEMBER_FILE);
    WHILE NOT EOF(MEMBER_FILE) DO
    BEGIN
    READ(MEMBER_FILE,REC);
    IF REC.ID<>ID THEN
     WRITE(R,REC);
     END;
     CLOSE(R);
     CLOSE(MEMBER_FILE);
     COPYFILE('TEMP.DAT','MEMBER.DAT');
   END;
END;

PROCEDURE BOOK_MODIFY(ID:INTEGER);
 VAR
     R,REC:BOOK_RECORD;
     ST,D:STRING;
   K,ECODE:INTEGER;
     FPOSI:INTEGER;
 BEGIN
      RESET(BOOK_FILE);
      INITIALIZE_BOOK(REC);
      REC.ID:=ID;
      IF SEARCH_BOOK(BOOK_FILE,REC) THEN
      BEGIN
          FPOSI:=FILEPOS(BOOK_FILE)-1;
          DISPLAY_BOOK(REC);
          IF READXY(X,Y,XI,REC.NAME) THEN EXIT;
          IF READXY(X,Y+1,XI,REC.AUTHOR) THEN EXIT;
          IF READXY(X,Y+2,XI,REC.PUBLISHER) THEN EXIT;
          IF READXY(X,Y+3,XI,REC.PRICE) THEN EXIT;
          FOUND:=TRUE;
          REPEAT
          REPEAT
          STR(REC.ID,ST);
          IF READXY(X,Y+4,XI,ST) THEN EXIT;
          K:=REC.ID;
          VAL(ST,REC.ID,ECODE);
          UNTIL ECODE=0;
           INITIALIZE_BOOK(R);
          RESET(BOOK_FILE);
          R.ID:=REC.ID;
          IF (SEARCH_BOOK(BOOK_FILE,R)) AND (K<>REC.ID) THEN
          PRINT_ERROR(RECORD_ALREADY_PRESENT) ELSE
          FOUND:=FALSE;
          UNTIL NOT FOUND;
          REPEAT
          STR(REC.EDITION,ST);
          IF READXY(X,Y+5,XI,ST) THEN EXIT;
          VAL(ST,REC.EDITION,ECODE);
          UNTIL ECODE=0;
          SEEK(BOOK_FILE,FPOSI);
         WRITE(BOOK_FILE,REC);
      END
      ELSE
      PRINT_ERROR(RECORD_NOT_FOUND);
      CLOSE(BOOK_FILE);
END;

PROCEDURE BOOK_ADD;
VAR
    T1,T2,T3:STRING;
    R,REC:BOOK_RECORD;
    ST,D:STRING;
    ECODE:INTEGER;
BEGIN
         INITIALIZE_BOOK(REC);
         DISPLAY_BOOK(REC);
          IF READXY(X,Y,XI,REC.NAME) THEN EXIT;
          IF READXY(X,Y+1,XI,REC.AUTHOR) THEN EXIT;
          IF READXY(X,Y+2,XI,REC.PUBLISHER) THEN EXIT;
          IF READXY(X,Y+3,XI,REC.PRICE) THEN EXIT;
          ST:='';
          FOUND:=TRUE;
          REPEAT
          REPEAT
          IF READXY(X,Y+4,XI,ST) THEN EXIT;
          VAL(ST,REC.ID,ECODE);
          UNTIL ECODE=0;
          INITIALIZE_BOOK(R);
          R.ID:=REC.ID;
          RESET(BOOK_FILE);
    IF SEARCH_BOOK(BOOK_FILE,R) THEN PRINT_ERROR(RECORD_ALREADY_PRESENT)
                   ELSE FOUND:=FALSE;
          UNTIL NOT FOUND;;
        REPEAT
          STR(REC.EDITION,ST);
          IF READXY(X,Y+5,XI,ST) THEN EXIT;
          VAL(ST,REC.EDITION,ECODE);
          UNTIL ECODE=0;
          RESET(BOOK_FILE);
          SEEK(BOOK_FILE,FILESIZE(BOOK_FILE));
          WRITE(BOOK_FILE,REC);
          CLOSE(BOOK_FILE);
END;

PROCEDURE BOOK_DELETE(ID:INTEGER);
VAR
    R:BOOK_FILETYPE;
    REC:BOOK_RECORD;
BEGIN
    RESET(BOOK_FILE);
    INITIALIZE_BOOK(REC);
    REC.ID:=ID;
    IF NOT SEARCH_BOOK(BOOK_FILE,REC) THEN
    PRINT_ERROR(RECORD_NOT_FOUND)
    ELSE
  BEGIN
    RESET(BOOK_FILE);
    ASSIGN(R,'TEMP.DAT');
    REWRITE(R);
    WHILE NOT EOF(BOOK_FILE) DO
    BEGIN
    READ(BOOK_FILE,REC);
    IF REC.ID<>ID THEN
     WRITE(R,REC);
     END;
     CLOSE(R);
     CLOSE(BOOK_FILE);
     COPYFILE('TEMP.DAT','BOOK.DAT');
   END;
END;
BEGIN
   X:=27; Y:=11; XI:=70;
END.