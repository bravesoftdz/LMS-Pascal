PROGRAM COMPARE_LINK_LIST(INPUT,OUTPUT);
USES CRT;
TYPE
  PTR=^NODE;
  NODE=RECORD
       DATA:INTEGER;
       LINK:PTR;
       END;
VAR
  LARGE,SUB_LIST:PTR;
  POSI:INTEGER;
  COMP:BOOLEAN;
PROCEDURE ADD(VAR P:PTR;VAL:INTEGER);
VAR
  C,T:PTR;
BEGIN
 NEW(T);
 T^.DATA:=VAL;
 T^.LINK:=NIL;
 IF P=NIL THEN
  P:=T
  ELSE
  BEGIN
   C:=P;
   WHILE C^.LINK<>NIL DO
    C:=C^.LINK;
   C^.LINK:=T;
   END;
END;
PROCEDURE CREATE_LIST(VAR P:PTR);
VAR
  VAL:INTEGER;
BEGIN
  WRITELN;
  WRITELN('ENTER VALUES SEPERATED BY ENTER KEY ');
  WRITELN('AND TERMINATED BY VALUE 0');
  READLN(VAL);
   WHILE VAL<>0 DO
   BEGIN
    ADD(P,VAL);
    READLN(VAL);
   END;
END;
FUNCTION COMP_LIST(VAR L,S:PTR):BOOLEAN;
VAR  SAME:BOOLEAN;
BEGIN
   SAME:=TRUE;
     WHILE (L<>NIL) AND (S<>NIL) AND (SAME) DO
     BEGIN
       IF NOT(L^.DATA=S^.DATA) THEN SAME:=FALSE
       ELSE
       BEGIN
        L:=L^.LINK;
        S:=S^.LINK;
       END;
     END;
     COMP_LIST:=SAME;
END;

FUNCTION GOTO_VALUE(VAR P:PTR;VAL:INTEGER):BOOLEAN;
VAR
  FOUND:BOOLEAN;
BEGIN
   FOUND:=FALSE;
   WHILE (P<>NIL) AND (NOT FOUND) DO
   BEGIN
    IF P^.DATA=VAL THEN FOUND:=TRUE
    ELSE
    P:=P^.LINK;
   END;
   GOTO_VALUE:=FOUND;
END;

FUNCTION GET_POSI(ORIG:PTR;VAL:INTEGER):INTEGER;
VAR
  I:INTEGER;
BEGIN
  I:=1;
  WHILE (ORIG^.DATA<>VAL) AND (ORIG<>NIL) DO
  BEGIN
   I:=I+1;
   ORIG:=ORIG^.LINK;
  END;
  GET_POSI:=I;
END;
FUNCTION FULL_LIST(L,S:PTR):BOOLEAN;
VAR
  CHECK:BOOLEAN;
  ORIG:PTR;
  VAL:INTEGER;
BEGIN
  ORIG:=L;
  VAL:=S^.DATA;
  CHECK:=FALSE;
  REPEAT
   IF GOTO_VALUE(L,S^.DATA) THEN
   CHECK:=COMP_LIST(L,S);
   IF CHECK THEN
   POSI:=GET_POSI(ORIG,VAL);
  UNTIL (CHECK) OR (L=NIL);
  FULL_LIST:=CHECK;
  IF S<>NIL THEN FULL_LIST:=FALSE;
END;

BEGIN
 CLRSCR;
 LARGE:=NIL;
 SUB_LIST:=NIL;
 WRITELN('ENTER ELEMENTS FOR LARGER LIST');
 CREATE_LIST(LARGE);
 WRITELN;
 WRITELN('ENTER ELEMENTS FOR SUBLIST');
 CREATE_LIST(SUB_LIST);
 COMP:=FULL_LIST(LARGE,SUB_LIST);
 WRITELN('SUBLIST IS PRESENT IN LARGER LIST IS ',COMP);
 IF NOT COMP THEN POSI:=0;
 WRITE('THE POSITION IS  ',POSI);
 READLN;
END.